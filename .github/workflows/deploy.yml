name: Deploy to Vercel

on: [push]

jobs:
  setup-environment:
    name: Setup environment
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Installing node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14.6.0

  lint:
    name: ESLint
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: Get Yarn cache path
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/checkout@master
      - name: Load Yarn cache
        uses: actions/cache@master
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Installing dependencies
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile
      - run: yarn lint:code

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: lint
    # on every branch that isnt master
    if: github.ref != 'refs/heads/master'
    steps:
      - uses: actions/checkout@master
      - uses: amondnet/vercel-action@v19
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID}}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          github-comment: true

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: lint
    # only deploy given successful tests
    # on master exclusively
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@master
      - uses: amondnet/vercel-action@v19
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID}}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          github-comment: true
          vercel-args: "--prod"

  # Run Lighthouse reports
  # based on https://github.com/UnlyEd/next-right-now/blob/v2-mst-aptd-gcms-lcz-sty/.github/workflows/deploy-zeit-production.yml#L95
  run-lighthouse-tests:
    name: Run LightHouse
    runs-on: ubuntu-latest
    needs: deploy-prod
    steps:
      - uses: actions/checkout@master
      - name: Resolving deployment url from Vercel
        # The following workflow is:
        #  - getting the most recent production deployment data
        #  - then extract the url (in Node.js it corresponds as `response.deployments[0].url`)
        #  - and then we remove the `"` character to pre-format url
        # We need to set env the url for next step
        run: |
          apt update -y >/dev/null && apt install -y jq >/dev/null
          VERCEL_DEPLOYMENT=`curl -H 'Accept: application/json' -H 'Content-Type: application/json' -H 'Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}' "https://api.zeit.co/v5/now/deployments?limit=1&meta-githubCommitRef=refs/heads/master" | jq '.deployments [0].url' | tr -d \"`
          echo "::set-env name=VERCEL_DEPLOYMENT_URL::https://$VERCEL_DEPLOYMENT"
        env:
          # Passing github's secret to the worker
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      # In order to store reports and then upload it, we need to create the folder before any tests
      - name: Create temporary folder for artifacts storage
        run: mkdir /tmp/lighthouse-artifacts

      - name: Run Lighthouse
        uses: foo-software/lighthouse-check-action@master
        id: lighthouseCheck
        with:
          # See https://github.com/marketplace/actions/lighthouse-check#inputs for all options
          accessToken: ${{ secrets.GITHUB_TOKEN }}
          # Used to upload artifacts.
          outputDirectory: /tmp/lighthouse-artifacts
          # Run LightHouse against "mobile", "desktop", or "all" devices
          emulatedFormFactor: all
          urls: ${{ env.VERCEL_DEPLOYMENT_URL }}
          prCommentEnabled: true

      # Upload HTML report create by lighthouse
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: Lighthouse reports
          path: /tmp/lighthouse-artifacts

      - name: Handle Lighthouse Check results
        uses: foo-software/lighthouse-check-status-action@master
        with:
          lighthouseCheckResults: ${{ steps.lighthouseCheck.outputs.lighthouseCheckResults }}
          minAccessibilityScore: "80"
          minBestPracticesScore: "80"
          minPerformanceScore: "80"
          minSeoScore: "80"
          minProgressiveWebAppScore: "50"
